#!/bin/bash -e

# Copyright The IETF Trust 2019, All Rights Reserved
# Copyright (c) 2018 Cisco and/or its affiliates.
# This software is licensed to you under the terms of the Apache License, Version 2.0 (the "License").
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# The code, technical concepts, and all information contained herein, are the property of Cisco Technology, Inc.
# and/or its affiliated entities, under various laws including copyright, international treaties, patent,
# and/or contract. Any use of the material herein must be in accordance with the terms of the License.
# All rights not expressly granted by the License are reserved.
# Unless required by applicable law or agreed to separately in writing, software distributed under the
# License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied.
#

exec >> /var/yang/logs/cronjob-daily.log

check_success_message () {
  # $1 - message to log in case if there's no success message
  SUCCESS_MESSAGE=$(head -n1 "$SUCCESSFUL_MESSAGES_LOG")
  if [[ -z "$SUCCESS_MESSAGE" ]]  # True if "$SUCCESS_MESSAGE" is empty
  then
    python "$VIRTUAL_ENV"/job_log.py --start "$START" --end "$(date "+%s")" --status "Fail" --error "$1" --filename "cronjob-daily"
    exit 1
  fi
  truncate -s 0 "$SUCCESSFUL_MESSAGES_LOG"
}

START=$(date "+%s")
python "$VIRTUAL_ENV"/job_log.py --start "$START" --end "" --status "In Progress" --filename "cronjob-daily"
#source activate
source "$CONF"/configure.sh
truncate -s 0 "$SUCCESSFUL_MESSAGES_LOG"
date +"%c: Downloading from GitHub YangModels"
{
  ./run_download_github.sh
  check_success_message "GitHub download failed"
  DOWNLOAD_GITHUB_STATUS="$SUCCESS_MESSAGE"
  echo "$DOWNLOAD_GITHUB_STATUS"
} || {
  check_success_message "GitHub  fadownloadiled"
}

(
    flock -xn 200
    RETVAL=$?
    if [ $RETVAL -eq 0 ]; then
        trap 'rm /var/yang/tmp/cronjob-lock.lock 2>/dev/null' ERR EXIT
        echo "$(date) starting cronjob-daily" >>/var/yang/logs/crons-log.log
    else
        echo "$(date) cronjob-daily still running - skipping now" >>/var/yang/logs/crons-log.log
        exit 1
    fi
) 200>/var/yang/tmp/cronjob-lock.lock

date +"%c: Starting run_ietf_module_extraction.sh"

{
  "$VIRTUAL_ENV"/ietf_modules_extraction/run_ietf_module_extraction.sh
  check_success_message "IETF modules extraction failed, check the logs for more details: $LOGS/extract_ietf_modules.log"
  IETF_MODULES_EXTRACTION_MESSAGE="$SUCCESS_MESSAGE"
  echo "$IETF_MODULES_EXTRACTION_MESSAGE"
} || {
  check_success_message "IETF modules extraction failed, check the logs for more details: $LOGS/extract_ietf_modules.log"
}

date +"%c: Starting run_module_compilation.sh"
{
  "$VIRTUAL_ENV"/modules_compilation/run_module_compilation.sh
  check_success_message "Modules compilation failed, check the logs for more details: $LOGS/compile_modules.log"
  MODULES_COMPILATION_MESSAGE="$SUCCESS_MESSAGE"
  echo "$MODULES_COMPILATION_MESSAGE"
} || {
  check_success_message "Modules compilation failed, check the logs for more details: $LOGS/compile_modules.log"
}
date +"%c: Starting rename_file_backup.py"
mkdir -p "$BACKUPDIR"
{
  python "$VIRTUAL_ENV"/rename_file_backup.py
} || {
  python "$VIRTUAL_ENV"/job_log.py --start "$START" --end "$(date "+%s")" --status "Fail" --error "rename_file_backup.py script failed" --filename "cronjob-daily" && exit 1
}
date +"%c: Starting run_generate_main_page.sh"
{
  "$VIRTUAL_ENV"/main_page_generation/run_generate_main_page.sh
  check_success_message "Main page generation failed"
  MAIN_PAGE_GENERATION_MESSAGE="$SUCCESS_MESSAGE"
  echo "$MAIN_PAGE_GENERATION_MESSAGE"
} || {
  check_success_message "Main page generation failed"
}
date +"%c: Starting run_generate_figures_and_stats.sh"
{
  "$VIRTUAL_ENV"/figures_and_stats/run_generate_figures_and_stats.sh
  check_success_message "Figures and stats generation failed, check the logs for more details: $LOGS/generate_figures_and_stats.log"
  FIGURES_AND_STATS_GENERATION_MESSAGE="$SUCCESS_MESSAGE"
  echo "$FIGURES_AND_STATS_GENERATION_MESSAGE"
} || {
  check_success_message "Figures and stats generation failed, check the logs for more details: $LOGS/generate_figures_and_stats.log"
}

# This are simple files for other Yang Catalog to know which files have been created
cd "$WEB_PRIVATE"
ls *.json > json_links
END=$(date "+%s")
python "$VIRTUAL_ENV"/job_log.py --start "$START" --end "$END" --status "Success" --filename "cronjob-daily" --load-messages-json --messages '{"label":"run_download_github.sh","message":"'"$DOWNLOAD_GITHUB_STATUS"'"}' '{"label":"run_ietf_module_extraction.sh","message":"'"$IETF_MODULES_EXTRACTION_MESSAGE"'"}' '{"label":"run_module_compilation.sh","message":"'"$MODULES_COMPILATION_MESSAGE"'"}' '{"label":"run_generate_main_page.sh","message":"'"$MAIN_PAGE_GENERATION_MESSAGE"'"}' '{"label":"run_generate_figures_and_stats.sh","message":"'"$FIGURES_AND_STATS_GENERATION_MESSAGE"'"}'
date +"%c: End of $0"